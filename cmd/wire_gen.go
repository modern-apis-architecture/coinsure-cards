// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/modern-apis-architecture/coinsure-cards/cmd/graph"
	"github.com/modern-apis-architecture/coinsure-cards/internal/domain/cards/service"
	"github.com/modern-apis-architecture/coinsure-cards/internal/security/middleware"
	"github.com/modern-apis-architecture/coinsure-cards/internal/security/openid"
	"github.com/modern-apis-architecture/coinsure-cards/internal/storage/banklo"
	"github.com/modern-apis-architecture/coinsure-cards/internal/storage/banklo/account"
	cards2 "github.com/modern-apis-architecture/coinsure-cards/internal/storage/banklo/cards"
	"github.com/modern-apis-architecture/coinsure-cards/internal/storage/banklo/subscription"
	"github.com/modern-apis-architecture/coinsure-cards/internal/storage/mongo"
	"github.com/modern-apis-architecture/coinsure-cards/internal/storage/mongo/cards"
)

// Injectors from wire.go:

func buildAppContainer() (*Application, error) {
	tokenParser := openid.NewTokenParser()
	cachingProvider := openid.NewJwksProvider()
	authMiddleware := middleware.NewAuthMiddleware(tokenParser, cachingProvider)
	jwtValidator := middleware.NewJwtValidator(cachingProvider)
	database, err := mongo.NewDatabase()
	if err != nil {
		return nil, err
	}
	collection, err := mongo.ProvideCollection(database)
	if err != nil {
		return nil, err
	}
	mongoCardRepository := cards.NewMongoCardRepository(collection)
	client := banklo.ProvideHttpCli()
	bankloAccountService := account.NewBankloAccountService(client)
	bankloCardService := cards2.NewBankloCardService(client)
	bankloSubscriptionService := subscription.NewBankloSubscriptionService(client)
	cardService := service.NewCardService(mongoCardRepository, bankloAccountService, bankloCardService, bankloSubscriptionService)
	resolver := graph.NewResolver(cardService)
	application := NewApplication(authMiddleware, jwtValidator, resolver)
	return application, nil
}
